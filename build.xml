<?xml version="1.0" encoding="UTF-8"?>
<project name="semwiktionary" default="junit" basedir=".">
	<!-- JAVA CLASSES -->	
		<!-- package prefix -->
		<property name="package" value="edu.unice.polytech.kis.semwiktionary"/>

		<!-- main class to be executed -->
		<property name="main_class" value="${package}.SemWiktionary"/>
		
		<!-- main test class to be run by Junit -->
		<property name="test.class.name" value="${package}.test.RunAndPray" />
				
	<!-- /JAVA CLASSES -->
	
	
	<!-- CONFIGURATION -->
		<!-- a string to be appended to the final archive -->
		<property name="project_suffix" value="_MattiSG"/>
		
		<!-- building JDK version -->
		<property name="jdk.dev" value="1.6" />
				
		<!-- deployment target JDK version -->
		<property name="jdk.target" value="1.6" />
		
		<!-- option to be passed to javac -->
		<property name="compile.debug" value="true"/>
	<!-- /CONFIGURATION -->
	
	
	<!-- LOCATIONS -->
		<!-- build file (this one), for inclusion in final archive -->
		<property name="build_file" value="build.xml"/>
		
		<!-- java source folder -->
		<property name="src" location="src"/>
		
		<!-- junit tests source folder -->		
		<property name="test_dir" value="test"/>
		
		<!-- location of general java resources -->
		<property name="resources" location="resources"/>
		
		<!-- location of configuration files -->
		<property name="config" location="config"/>
		
		<!-- location of documentation to be included -->
		<property name="doc" location="doc"/>
				
		<!-- local libraries linked against -->
		<property name="lib" location="lib"/>
		
		<!-- folder for execution output -->
		<property name="log" location="log"/>

		 <!-- database storage folder -->
		<property name="data" location="data"/>
		
		 <!-- intermediate folder for final zipping -->
		<property name="tmp" location="tmp"/>
		
		 <!-- intermediate build products -->
		<property name="build" location="build"/>
		
		 <!-- final build products -->
		<property name="bin" location="bin"/>
		
		 <!-- jar files -->
		<property name="jars" location="jars"/>
		
		<!-- build product location -->
		<property name="dist" location="dist"/>
		
	<!-- /LOCATIONS -->
	
	
	<!-- TASKS -->
	
	<taskdef name="jflex" classname="JFlex.anttask.JFlexTask" classpath="${lib}/JFlex.jar"/>
	
	<!-- /TASKS -->
	
	<!-- lib directory should contain any pre-built jar files needed to build the project -->
	<fileset id="lib.jars" dir="${lib}">
		<include name="**/*.jar"/>
	</fileset>

	<path id="lib.path">
		<fileset refid="lib.jars"/>
	</path>

	<!-- Initialization target, for any prelimary setup needed to build -->
	<target name="init" description="Preparation">
		<mkdir dir="${src}"/>
		<mkdir dir="${lib}"/>
		<mkdir dir="${build}"/>
		<mkdir dir="${data}"/>
		<mkdir dir="${doc}"/>
	</target>
	
	<target name="doc">
		<javadoc linksource="true" docencoding="UTF-8"
			destdir="${doc}/javadoc"
			classpathref="lib.path"
		>
			<fileset dir="${src}">
				<filename name="**/*.java"/>
			</fileset>
			<doclet name="com.visural.doclets.markdown.standard.Standard" path="${lib}/MarkdownDoclet-3.0.jar">
			</doclet>
		</javadoc>	
	</target>
	
	 <!-- For more information about this task, see http://jflex.de/jflex_anttask.html -->
	<target name="jflex" depends="init" description="Generate parser">
		<jflex
			file="${src}/edu/unice/polytech/kis/semwiktionary/parser/WikimediaDump.jflex"
			destdir="${build}"
		/>
	</target>

	<target name="compile" depends="jflex" description="Compile code">
		<mkdir dir="${bin}"/>
		<javac deprecation="on" srcdir="${src}:${build}" destdir="${bin}"
			source="${jdk.dev}" target="${jdk.target}"
			includeAntRuntime="no"
			debug="${compile.debug}"
			classpathref="lib.path"
			>
				<compilerarg value="-Xlint:unchecked"/>
		</javac>
	</target>

	<target name="compile_tests" depends="compile" description="Compile tests code">
		<javac deprecation="on" srcdir="${test_dir}" destdir="${bin}"
			source="${jdk.dev}" target="${jdk.target}"
			includeAntRuntime="no"
			debug="${compile.debug}"
			classpathref="lib.path"
			> <!-- TODO: use a reference to share compile and compile_tests javac node -->
		</javac>
	</target>
	
	<target name="jar" depends="compile" description="Build jar">
		<property name="jar_file" value="${jars}/${ant.project.name}${project_suffix}.jar"/>
		<delete file="${jar_file}"/>
		<buildnumber file="build.num"/>
		
		<tstamp>
			<format property="now" pattern="yyyy-MM-dd HH:mm:ss" />
		</tstamp>
		
		<manifest file="${bin}/Manifest">
			<attribute name="Built-By" value="${user.name}"/>
			<attribute name="Main-Class" value="${main_class}"/>
			<attribute name="Built-Date" value="${TODAY}"/>                 
		</manifest>
		
		<jar destfile="${jar_file}"
			basedir="."
			manifest="${bin}/Manifest"
			>
			<fileset dir="${bin}/"/>
		</jar>
		<!-- TODO: now, this is an executable JAR. Make another one for source. -->
	</target>

	<target name="jar_tests" depends="compile_tests" description="Build tests jar">
		<mkdir dir="${jars}"/>
		<jar jarfile="${jars}/${ant.project.name}${project_suffix}_tests.jar" basedir="${test_dir}">
			<fileset dir="${test_dir}/" />
		</jar>
	</target>

	<target name="junit" depends="compile_tests">
		<junit fork="yes" haltonfailure="yes" haltonerror="yes">
			<formatter type="plain" usefile="false" />
			<test name="${test.class.name}" />
			<classpath>
				<pathelement location="${bin}" />
				<fileset refid="lib.jars"/>
			</classpath>
		</junit>
	</target>

	<target name="install" depends="clean, jar, jar_tests, junit, doc" description="Create dist directory, include jars and doc if everything works">
		<mkdir dir="${dist}"/>
		<mkdir dir="${tmp}"/>
		<mkdir dir="${tmp}/config"/>
		<copy file="${build_file}" todir="${tmp}"/>
<!--		<copy todir="${tmp}/config">
				<fileset dir="${config}"/>  // TODO: do not fail if directory does not exist
		</copy>
-->
		<zip destfile="${dist}/${ant.project.name}${project_suffix}.zip">
			<fileset dir="${jars}"/>
			<fileset dir="${doc}"/>
			<fileset dir="${tmp}"/>
		</zip>
		<delete dir="${tmp}"/>
	</target>

	<target name="parse" depends="compile_tests" description="Run the parser">
		<mkdir dir="${log}"/>
		
		<java classname="edu.unice.polytech.kis.semwiktionary.parser.Main" fork="false" failonerror="true">
			<classpath>
				<pathelement location="${bin}" />
				<fileset refid="lib.jars"/>
			</classpath>
		</java>
	</target>

	<target name="run" depends="compile" description="Run the tool">
		<java classname="${main_class}" classpath="${bin}" fork="true"> <!-- TODO: add lib to the classpath -->
		</java>
	</target>
	
	<target name="srun" depends="junit, run" description="Securely run the tool" />

	<target name="erase_db" description="Drop all database content">
		<delete dir="${data}" />
	</target>
	
	<target name="clean" description="Remove all generated directories">
		<delete dir="${build}"/>
		<delete dir="${bin}"/>
		<delete dir="${jars}"/>
		<delete dir="${dist}"/>
		<delete dir="${tmp}"/>
	</target>
</project>
